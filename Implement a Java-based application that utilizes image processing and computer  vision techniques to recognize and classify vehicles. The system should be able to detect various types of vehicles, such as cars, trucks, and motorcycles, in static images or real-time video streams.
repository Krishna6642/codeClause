import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;
import org.opencv.videoio.VideoCapture;

public class VehicleDetectionSystem {

    static {
        // Load OpenCV native library
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    // Method to detect vehicles in an image
    public static void detectVehiclesInImage(String imagePath) {
        // Load the image
        Mat image = Imgcodecs.imread(imagePath);

        // Convert the image to grayscale
        Mat grayImage = new Mat();
        Imgproc.cvtColor(image, grayImage, Imgproc.COLOR_BGR2GRAY);

        // Load the Haar Cascade file for car detection
        CascadeClassifier carCascade = new CascadeClassifier("haarcascade_car.xml");

        // Detect cars
        MatOfRect cars = new MatOfRect();
        carCascade.detectMultiScale(grayImage, cars);

        // Draw rectangles around detected vehicles
        for (Rect rect : cars.toArray()) {
            Imgproc.rectangle(image, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height),
                    new Scalar(0, 255, 0), 3);
        }

        // Save the result image
        Imgcodecs.imwrite("detected_vehicles.jpg", image);
        System.out.println("Vehicle detection completed. Check 'detected_vehicles.jpg'");
    }

    // Method to detect vehicles in a video stream (real-time detection)
    public static void detectVehiclesInVideo(String videoPath) {
        VideoCapture capture = new VideoCapture(videoPath);

        if (!capture.isOpened()) {
            System.out.println("Error: Could not open video.");
            return;
        }

        CascadeClassifier carCascade = new CascadeClassifier("haarcascade_car.xml");

        Mat frame = new Mat();
        while (capture.read(frame)) {
            // Convert the frame to grayscale
            Mat grayFrame = new Mat();
            Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY);

            // Detect cars
            MatOfRect cars = new MatOfRect();
            carCascade.detectMultiScale(grayFrame, cars);

            // Draw rectangles around detected vehicles
            for (Rect rect : cars.toArray()) {
                Imgproc.rectangle(frame, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height),
                        new Scalar(0, 255, 0), 3);
            }

            // Show the frame with detected vehicles (for GUI-based applications, use imshow method)
            // In a console application, you can save the frame for testing
            Imgcodecs.imwrite("frame_with_vehicles.jpg", frame);
        }

        capture.release();
        System.out.println("Video processing completed.");
    }

    public static void main(String[] args) {
        // Path to the image or video for detection
        String imagePath = "path_to_image.jpg";
        String videoPath = "path_to_video.mp4";

        // Detect vehicles in a static image
        detectVehiclesInImage(imagePath);

        // Detect vehicles in a video stream (comment/uncomment as needed)
        // detectVehiclesInVideo(videoPath);
    }
}
